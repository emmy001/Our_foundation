import React, { useState, useEffect } from 'react';
import {
  ChakraProvider,
  Box,
  Button,
  Input,
  Textarea,
  FormControl,
  FormLabel,
  Flex,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  useDisclosure,
} from '@chakra-ui/react';
import ResponsiveContainer from "../Components/ResponsiveContainers";
import ImageBackground from "../Components/Background";
import ProfileHeader from "../Components/ProfileHeader";
import ProfileImage from "../Components/Profile/ProfileImage";
import ProfileName from "../Components/Profile/ProfileName";
import BodyBold from "../Components/BodyBold";
import OccupationText from "../Components/OccupationText";
import PersonalInfo from "../Components/Profile/PersonalInfo";
import axios from "axios"; // For API requests
import { jwtDecode } from 'jwt-decode'; // To decode the JWT token
import { useRouter } from "next/router";
import UploadImage from "../Components/UploadImage";

const Index = () => {
  const router = useRouter();
  const { isOpen: isPostModalOpen, onOpen: onPostModalOpen, onClose: onPostModalClose } = useDisclosure(); // Modal hooks for post creation
  const [formData, setFormData] = useState({
    name: '',
    dob: '',
    email: '',
    phone: '',
    occupation: '',
    interests: '',
    aboutMe: '',
    imageUrl: '',
  });
  const [postData, setPostData] = useState({
    title: '',
    content: '',
    imageUrl: '', // Store the Cloudinary URL
    videoUrl: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false); // For user data submission
  const [isSubmittingPost, setIsSubmittingPost] = useState(false); // For post submission
  const [userId, setUserId] = useState(null); // State to store the user ID

  // Fetch existing user data
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          alert("No authentication token found. Please log in.");
          return;
        }

        const response = await axios.get('http://localhost:5000/api/userdata/public', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        const userData = response.data.data;
        setFormData({
          name: userData.name,
          dob: userData.personalInfo.DOB,
          email: userData.personalInfo.email,
          phone: userData.personalInfo.phoneNo,
          occupation: userData.personalInfo.occupation,
          interests: userData.interests.join(', '), // Convert array to comma-separated string
          aboutMe: userData.aboutMe,
          imageUrl: userData.imageUrl,
        });

        // Store the user ID in state
        setUserId(userData._id); // Assuming the backend returns the user ID as `_id`
      } catch (error) {
        console.error('Error fetching user data:', error);
        alert('Failed to fetch user data. Please try again.');
      }
    };

    fetchUserData();
  }, []);

  // Handle form input changes for user data
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // Handle post input changes
  const handlePostInputChange = (e) => {
    const { name, value } = e.target;
    setPostData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // Upload image to Cloudinary
  const uploadImage = async (image) => {
    const data = new FormData();
    data.append("file", image);
    data.append("upload_preset", "inventoryapp");

    try {
      const response = await fetch("https://api.cloudinary.com/v1_1/ddhayhptm/image/upload", {
        method: "POST",
        body: data,
      });
      const result = await response.json();
      setPostData((prevData) => ({
        ...prevData,
        imageUrl: result.secure_url, // Update the imageUrl in postData
      }));
      alert("Image Successfully Uploaded");
    } catch (error) {
      console.error("Error uploading image:", error);
      alert("Failed to upload image. Please try again.");
    }
  };

  // Submit form data to update the database
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        alert("No authentication token found. Please log in.");
        return;
      }

      const decoded = jwtDecode(token);
      if (decoded.exp * 1000 < Date.now()) {
        alert("Your session has expired. Please log in again.");
        localStorage.removeItem('token');
        return;
      }

      // Format the formData to match the backend schema
      const payload = {
        name: formData.name,
        occupation: formData.occupation,
        imageUrl: formData.imageUrl,
        personalInfo: {
          name: formData.name,
          DOB: formData.dob,
          email: formData.email,
          phoneNo: formData.phone,
          occupation: formData.occupation,
        },
        interests: formData.interests.split(',').map(i => i.trim()), // Convert interests to an array
        aboutMe: formData.aboutMe,
      };

      console.log("Sending data:", JSON.stringify(payload, null, 2));

      // Send a PUT request to update the user data
      await axios.put(`http://localhost:5000/api/userdata/${userId}`, payload, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      alert('Userdata updated successfully!');
    } catch (error) {
      console.error('Error updating userdata:', error.response || error.message);
      alert('Failed to update userdata. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Submit post data to the backend
  const handlePostSubmit = async () => {
    setIsSubmittingPost(true);

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        alert("No authentication token found. Please log in.");
        return;
      }

      // Validate that the user cannot provide both an image and a video URL
      if (postData.imageUrl && postData.videoUrl) {
        alert("You can only upload an image or provide a video URL, not both.");
        return;
      }

      const payload = {
        title: postData.title,
        content: postData.content,
        imageUrl: postData.imageUrl, // Use the Cloudinary URL
        videoUrl: postData.videoUrl,
      };

      const response = await axios.post('http://localhost:5000/api/posts', payload, {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json', // Send as JSON
        },
      });

      alert('Post created successfully!');
      onPostModalClose(); // Close the modal
      setPostData({ // Reset form data
        title: '',
        content: '',
        imageUrl: '', // Reset imageUrl
        videoUrl: '',
      });
    } catch (error) {
      console.error('Error creating post:', error.response || error.message);
      alert('Failed to create post. Please try again.');
    } finally {
      setIsSubmittingPost(false);
    }
  };

  // Handle logout
  const handleLogout = () => {
    localStorage.removeItem('token'); // Remove the token
    alert("You have been logged out.");
    router.push("/"); // Redirect to the login page (React Router v6)
  };

  return (
    <ChakraProvider>
      <Box position="fixed" top={0} left={0} width="100%" height="100%" zIndex={-1}>
        <ImageBackground />
      </Box>
      <ResponsiveContainer>
        <ProfileHeader />

        {/* Add Post and Logout Buttons */}
        <Flex justifyContent="flex-end" mt="6" gap="10px">
          <Button colorScheme="blue" onClick={onPostModalOpen}>
            Add Post
          </Button>
          <Button colorScheme="red" onClick={handleLogout}>
            Logout
          </Button>
        </Flex>

        {/* Add Post Modal */}
        <Modal isOpen={isPostModalOpen} onClose={onPostModalClose}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader>Create a New Post</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <FormControl mt="4">
                <FormLabel>Title</FormLabel>
                <Input
                  type="text"
                  name="title"
                  value={postData.title}
                  onChange={handlePostInputChange}
                  placeholder="Enter post title"
                  isRequired
                />
              </FormControl>
              <FormControl mt="4">
                <FormLabel>Content</FormLabel>
                <Textarea
                  name="content"
                  value={postData.content}
                  onChange={handlePostInputChange}
                  placeholder="Enter post content"
                  isRequired
                />
              </FormControl>
              <FormControl mt="4">
                <UploadImage onImageUpload={uploadImage} />
              </FormControl>
              <FormControl mt="4">
                <FormLabel>Video URL</FormLabel>
                <Input
                  type="url"
                  name="videoUrl"
                  value={postData.videoUrl}
                  onChange={handlePostInputChange}
                  placeholder="Enter video URL"
                />
              </FormControl>
              {postData.videoUrl && (
                <Box mt="4">
                  <video controls width="100%">
                    <source src={postData.videoUrl} type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                </Box>
              )}
            </ModalBody>
            <ModalFooter>
              <Button colorScheme="blue" onClick={handlePostSubmit} isLoading={isSubmittingPost}>
                Submit Post
              </Button>
              <Button variant="ghost" onClick={onPostModalClose}>
                Cancel
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>

        {/* Edit Userdata Section */}
        <Box mt="20px" p="20px" bg="white" borderRadius="10px" shadow="lg">
          <BodyBold>Edit Userdata</BodyBold>
          <form onSubmit={handleSubmit}>
            <FormControl mt="4">
              <FormLabel>Name</FormLabel>
              <Input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="Enter your name"
                isRequired
              />
            </FormControl>
            <FormControl mt="4">
              <FormLabel>Date of Birth</FormLabel>
              <Input
                type="date"
                name="dob"
                value={formData.dob}
                onChange={handleInputChange}
                isRequired
              />
            </FormControl>
            <FormControl mt="4">
              <FormLabel>Email</FormLabel>
              <Input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                placeholder="Enter your email"
                isRequired
              />
            </FormControl>
            <FormControl mt="4">
              <FormLabel>Phone Number</FormLabel>
              <Input
                type="tel"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                placeholder="Enter your phone number"
                isRequired
              />
            </FormControl>
            <FormControl mt="4">
              <FormLabel>Occupation</FormLabel>
              <Input
                type="text"
                name="occupation"
                value={formData.occupation}
                onChange={handleInputChange}
                placeholder="Enter your occupation"
              />
            </FormControl>
            <FormControl mt="4">
              <FormLabel>Interests</FormLabel>
              <Textarea
                name="interests"
                value={formData.interests}
                onChange={handleInputChange}
                placeholder="Enter interests (comma-separated)"
              />
            </FormControl>
            <FormControl mt="4">
              <FormLabel>About Me</FormLabel>
              <Textarea
                name="aboutMe"
                value={formData.aboutMe}
                onChange={handleInputChange}
                placeholder="Write something about yourself"
              />
            </FormControl>
            <FormControl mt="4">
              <FormLabel>Image URL</FormLabel>
              <Input
                type="url"
                name="imageUrl"
                value={formData.imageUrl}
                onChange={handleInputChange}
                placeholder="Enter an image URL"
              />
            </FormControl>
            <Button
              mt="6"
              colorScheme="blue"
              type="submit"
              isLoading={isSubmitting}
            >
              Update Information
            </Button>
          </form>
        </Box>
      </ResponsiveContainer>
    </ChakraProvider>
  );
};

export default Index;